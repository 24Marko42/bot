import asyncio  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from datetime import datetime  # –î–ª—è –æ—Ç–º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–∞—Ö
from pathlib import Path  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from typing import List, Union, Optional  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
import random

import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from conf import coffee_bot_token

API_TOKEN: str = coffee_bot_token
LOG_DIR: Path = Path("coffee_logs")
LOG_DIR.mkdir(exist_ok=True)

TASTY_URL: str = "https://shop.tastycoffee.ru/coffee?page=2"
API_COFFEE_LIST_URL: str = "https://api.sampleapis.com/coffee/hot"
BASE_URL: str = "https://shop.tastycoffee.ru"

MAIN_KEYBOARD: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ä—Ç–∞"),
            KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ"),
        ],
        [
            KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤"),
            KeyboardButton(text="üß™ –ü–æ–¥–±–æ—Ä –ø–æ –≤–∫—É—Å–∞–º"),
        ],
        [
            KeyboardButton(text="‚òï –°–æ–≤–µ—Ç—ã"),
            KeyboardButton(text="‚ÑπÔ∏è –û –∫–æ—Ñ–µ"),
        ],
    ],
    resize_keyboard=True
)

BREWING_TIPS: List[str] = [
    "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–µ–º–æ–ª–æ—Ç—ã–π –∫–æ—Ñ–µ.",
    "2. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã ‚Äî 92‚Äë96¬∞C.",
    "3. –ù–µ –∑–∞–ª–∏–≤–∞–π—Ç–µ –∫–∏–ø—è—Ç–∫–æ–º ‚Äî –≥–æ—Ä–µ—á—å!",
    "4. –ü—Ä–æ–ø–æ—Ä—Ü–∏—è: 60‚ÄØ–≥ –∫–æ—Ñ–µ –Ω–∞ –ª–∏—Ç—Ä –≤–æ–¥—ã.",
    "5. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –ø–æ–º–æ–ª–æ–º.",
]

ABOUT_COFFEE_TEXT: str = (
    "–ö–æ—Ñ–µ ‚Äî –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –æ–±–∂–∞—Ä–µ–Ω–Ω—ã—Ö –∑—ë—Ä–µ–Ω. –ü–æ–≤—ã—à–∞–µ—Ç –±–æ–¥—Ä–æ—Å—Ç—å, —É–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ–ø—É–ª—è—Ä–µ–Ω –≤–æ –≤—Å—ë–º –º–∏—Ä–µ."
)

class FlavorSearch(StatesGroup):
    waiting_for_flavors = State()

def log_message(message: Message) -> None:
    user = message.from_user
    log_file = LOG_DIR / f"user_{user.id}.log"
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().isoformat()} | {user.id} | {message.text}\n")

async def send_and_log(message: Message, content: Union[str, List[str]]) -> None:
    user = message.from_user
    log_file = LOG_DIR / f"user_{user.id}.log"
    def _log(entry: str):
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"{datetime.now().isoformat()} | Bot: {entry}\n")
    if isinstance(content, list):
        for text in content:
            await message.answer(text, parse_mode=ParseMode.HTML)
            _log(text)
    else:
        await message.answer(content, parse_mode=ParseMode.HTML)
        _log(content)

async def fetch_html(session: aiohttp.ClientSession, url: str) -> Optional[str]:
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                return await resp.text()
    except:
        return None

async def parse_coffee_page(url: str = TASTY_URL, limit: int = 5) -> List[str]:
    async with aiohttp.ClientSession() as session:
        html = await fetch_html(session, url)
        if not html:
            return ["‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É."]
    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("div.product-item")
    results = []
    for idx, item in enumerate(items[:limit]):
        title_tag = item.select_one("div.tc-tile__title a")
        name = title_tag.get_text(strip=True) if title_tag else "‚Äî"
        rel_link = title_tag.get("href", "") if title_tag else ""
        full_link = BASE_URL + rel_link
        price_tag = item.select_one(".tc-tile__price span")
        price_text = price_tag.get_text(strip=True) if price_tag else "‚Äî"
        results.append(f"‚òï <b>{name}</b>\nüí∞ {price_text}\nüîó <a href=\"{full_link}\">–°—Å—ã–ª–∫–∞</a>")
    return results or ["‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."]

async def translate_text(text: str, dest: str = "ru") -> str:
    import urllib.parse
    try:
        encoded = urllib.parse.quote(text)
        url = (
            f"https://translate.googleapis.com/translate_a/single"
            f"?client=gtx&sl=auto&tl={dest}&dt=t&q={encoded}"
        )
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    return text
                arr = await resp.json()
                if isinstance(arr, list) and arr and isinstance(arr[0], list):
                    return arr[0][0][0]
                else:
                    return text
    except:
        return text

async def get_coffee_list() -> str:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_COFFEE_LIST_URL) as resp:
                data = await resp.json()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"
    lines = ["–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ä—Ç–∞:"]
    for item in data[:10]:
        en = item.get("title", "‚Äî")
        ru = await translate_text(en, dest="ru")
        lines.append(f"‚Ä¢ {ru}")
    return "\n".join(lines)

async def get_coffee_random() -> str:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_COFFEE_LIST_URL) as resp:
                data = await resp.json()
    except:
        return "–û—à–∏–±–∫–∞ API"
    item = random.choice(data)
    title = item.get("title", "‚Äî")
    desc = item.get("description", "‚Äî")
    title_ru = await translate_text(title, dest="ru")
    desc_ru = await translate_text(desc, dest="ru")
    return f"üé≤ <b>{title_ru}</b>\n\n{desc_ru}"

async def get_all_flavor_notes() -> List[str]:
    async with aiohttp.ClientSession() as session:
        html = await fetch_html(session, TASTY_URL)
        if not html:
            return []
    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("div.product-item")
    notes_set = set()
    for item in items:
        desc_container = item.select_one("div.tc-tile__description")
        if not desc_container:
            continue
        description_p = desc_container.find("p")
        if not description_p:
            continue
        for span in description_p.select("span.descriptor-badge"):
            notes_set.add(span.get_text(strip=True).lower())
    return sorted(notes_set)

async def find_coffee_by_flavors(flavors: List[str]) -> List[str]:
    async with aiohttp.ClientSession() as session:
        html = await fetch_html(session, TASTY_URL)
        if not html:
            return ["–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏."]
    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("div.product-item")
    results = []
    for item in items:
        title_tag = item.select_one("div.tc-tile__title a")
        name_en = title_tag.get_text(strip=True) if title_tag else "‚Äî"
        link = BASE_URL + (title_tag.get("href", "") if title_tag else "")
        name_ru = await translate_text(name_en)
        desc_container = item.select_one("div.tc-tile__description")
        if not desc_container:
            continue
        description_p = desc_container.find("p")
        if not description_p:
            continue
        notes = [s.get_text(strip=True).lower() for s in description_p.select("span.descriptor-badge")]
        if all(f in notes for f in flavors):
            results.append(f"‚òï <b>{name_ru}</b>\n–í–∫—É—Å—ã: {', '.join(notes)}\nüîó <a href=\"{link}\">–°—Å—ã–ª–∫–∞</a>")
    return results or ["–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

bot = Bot(token=API_TOKEN)
_dp = Dispatcher()

@_dp.message(Command("start"))
async def cmd_start(message: Message):
    log_message(message)
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ –∫–æ—Ñ–µ ‚òï\n–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    await message.answer(text, reply_markup=MAIN_KEYBOARD)

@_dp.message(lambda m: m.text == "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ä—Ç–∞")
async def latest_coffee(message: Message):
    log_message(message)
    await send_and_log(message, await parse_coffee_page())

@_dp.message(lambda m: m.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ")
async def random_coffee(message: Message):
    log_message(message)
    await send_and_log(message, await get_coffee_random())

@_dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤")
async def coffee_list(message: Message):
    log_message(message)
    await send_and_log(message, await get_coffee_list())

@_dp.message(lambda m: m.text == "‚òï –°–æ–≤–µ—Ç—ã")
async def brewing_tips(message: Message):
    log_message(message)
    await send_and_log(message, "\n".join(BREWING_TIPS))

@_dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –∫–æ—Ñ–µ")
async def about_coffee(message: Message):
    log_message(message)
    await send_and_log(message, ABOUT_COFFEE_TEXT)

@_dp.message(lambda m: m.text == "üß™ –ü–æ–¥–±–æ—Ä –ø–æ –≤–∫—É—Å–∞–º")
async def select_flavors(message: Message, state: FSMContext):
    log_message(message)
    notes = await get_all_flavor_notes()
    if not notes:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ üòî")
        return
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n" + ", ".join(notes))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∫—É—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(FlavorSearch.waiting_for_flavors)

@_dp.message(FlavorSearch.waiting_for_flavors)
async def process_flavors(message: Message, state: FSMContext):
    log_message(message)
    flavors = [f.strip().lower() for f in message.text.split(",") if f.strip()]
    if not flavors:
        await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –≤–∫—É—Å—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await send_and_log(message, await find_coffee_by_flavors(flavors))
    await state.clear()

if __name__ == "__main__":
    print("–ö–æ—Ñ–µ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(_dp.start_polling(bot))
