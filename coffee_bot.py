import asyncio  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from datetime import datetime  # –î–ª—è –æ—Ç–º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–∞—Ö
from pathlib import Path  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from typing import List, Union, Optional  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

import aiohttp  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã
from bs4 import BeautifulSoup  # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
from aiogram import Bot, Dispatcher, types  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã Aiogram
from aiogram.filters.command import Command  # –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode  # –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è HTML-—Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
import urllib.parse

from conf import coffee_bot_token  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –ª–µ–∂–∏—Ç –∑–¥–µ—Å—å

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
API_TOKEN: str = coffee_bot_token  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
LOG_DIR: Path = Path("coffee_logs")  # –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
LOG_DIR.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

TASTY_URL: str = "https://shop.tastycoffee.ru/coffee?page=2"  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
API_COFFEE_LIST_URL: str = "https://api.sampleapis.com/coffee/hot"  # API —Å–ø–∏—Å–∫–∞ –∫–æ—Ñ–µ
BASE_URL: str = "https://shop.tastycoffee.ru"  # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ URL —Ç–æ–≤–∞—Ä–æ–≤

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ /start
MAIN_KEYBOARD: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="/latest_coffee"),
            KeyboardButton(text="/coffee_random"),
            KeyboardButton(text="/coffee_list"),
        ],
        [
            KeyboardButton(text="/brewing_tips"),
            KeyboardButton(text="/about_coffee"),
        ],
    ],
    resize_keyboard=True
)

# –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ñ–µ
BREWING_TIPS: List[str] = [
    "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–µ–º–æ–ª–æ—Ç—ã–π –∫–æ—Ñ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∫—É—Å–∞.",
    "2. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã ‚Äî 92‚Äë96¬∞C.",
    "3. –ù–µ –∑–∞–ª–∏–≤–∞–π—Ç–µ –∫–æ—Ñ–µ –∫–∏–ø—è—Ç–∫–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ—Ä–µ—á–∏.",
    "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–ø–æ—Ä—Ü–∏—é: –æ–∫–æ–ª–æ 60‚ÄØ–≥ –∫–æ—Ñ–µ –Ω–∞ –ª–∏—Ç—Ä –≤–æ–¥—ã.",
    "5. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–º–æ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.",
]

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ—Ñ–µ
ABOUT_COFFEE_TEXT: str = (
    "–ö–æ—Ñ–µ‚ÄØ‚Äî —ç—Ç–æ –Ω–∞–ø–∏—Ç–æ–∫, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∏–∑ –æ–±–∂–∞—Ä–µ–Ω–Ω—ã—Ö –∑—ë—Ä–µ–Ω –∫–æ—Ñ–µ–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.\n"
    "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ—Ä—Ç–æ–≤ –∏ —Å–ø–æ—Å–æ–±–æ–≤ –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. –ö–æ—Ñ–µ –ø–æ–≤—ã—à–∞–µ—Ç –±–æ–¥—Ä–æ—Å—Ç—å, "
    "—É–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –º–∏—Ä–µ."
)

# === –§–£–ù–ö–¶–ò–Ø-–ü–ï–†–ï–í–û–î–ß–ò–ö —á–µ—Ä–µ–∑ LibreTranslate ===
async def translate_text(text: str, dest: str = "ru") -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é "–Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ" Google Translate API:
      GET https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=<dest>&dt=t&q=<–≤—Ä–æ–¥–µ –±—ã URL‚Äëencoded —Ç–µ–∫—Å—Ç>
    –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞—ë—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    try:
        # URL‚Äëencode —Ç–µ–∫—Å—Ç–∞
        encoded = urllib.parse.quote(text)
        url = (
            f"https://translate.googleapis.com/translate_a/single"
            f"?client=gtx&sl=auto&tl={dest}&dt=t&q={encoded}"
        )
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    return text
                # –û—Ç–≤–µ—Ç‚ÄîJSON, –Ω–∞–ø—Ä–∏–º–µ—Ä: [[[ "–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", ... ]], ...]
                arr = await resp.json()
                # –ü–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞ arr[0][0][0] –ª–µ–∂–∏—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                if isinstance(arr, list) and arr and isinstance(arr[0], list):
                    translated = arr[0][0][0]
                    return translated
                else:
                    return text
    except Exception:
        return text

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
def log_message(message: Message) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª coffee_logs/user_<id>.log.
    """
    user = message.from_user
    log_file = LOG_DIR / f"user_{user.id}.log"
    text = message.text or ""
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(
            f"{datetime.now().isoformat()} | "
            f"User {user.id} ({user.full_name} | @{user.username}) | "
            f"Message: {text}\n"
        )

async def send_and_log(message: Message, content: Union[str, List[str]]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ –∏ –ª–æ–≥–∏—Ä—É–µ–º.
    –ï—Å–ª–∏ content ‚Äî —Å–ø–∏—Å–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ.
    """
    user = message.from_user
    log_file = LOG_DIR / f"user_{user.id}.log"

    def _write_log(entry: str) -> None:
        with open(log_file, "a", encoding="utf-8") as f_log:
            f_log.write(f"{datetime.now().isoformat()} | Bot sent: {entry}\n")

    if isinstance(content, list):
        for text in content:
            await message.answer(text, parse_mode=ParseMode.HTML)
            _write_log(text)
    else:
        await message.answer(content, parse_mode=ParseMode.HTML)
        _write_log(content)

# === –ê–°–ò–ù–•–†–û–ù–ù–´–ï HTTP‚Äë–§–£–ù–ö–¶–ò–ò ===
async def fetch_html(session: aiohttp.ClientSession, url: str) -> Optional[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –ª–∏–±–æ None.
    """
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                return await resp.text()
            else:
                return None
    except asyncio.TimeoutError:
        return None
    except aiohttp.ClientError:
        return None

async def parse_coffee_page(url: str = TASTY_URL, limit: int = 5) -> List[str]:
    """
    –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É tastycoffee.ru/coffee?page=2, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ `limit` —Ç–æ–≤–∞—Ä–æ–≤:
      ‚Ä¢ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ) ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º
      ‚Ä¢ —Ü–µ–Ω–∞
      ‚Ä¢ —Å—Å—ã–ª–∫–∞
      ‚Ä¢ –æ–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ) ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º
      ‚Ä¢ –Ω–æ—Ç—ã –≤–∫—É—Å–∞ (–æ–±—ã—á–Ω–æ —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö HTML-—Å—Ç—Ä–æ–∫. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É-–æ—à–∏–±–∫—É.
    """
    async with aiohttp.ClientSession() as session:
        html = await fetch_html(session, url)
        if not html:
            return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ tastycoffee.ru"]

    soup = BeautifulSoup(html, "html.parser")
    # –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–¥ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å—Ç–∫—É: –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –∫–ª–∞—Å—Å "product-item"
    items = soup.select("div.product-item")
    results: List[str] = []

    for idx, item in enumerate(items):
        if idx >= limit:
            break  # –ë–µ—Ä—ë–º –Ω–µ –±–æ–ª–µ–µ limit —Ç–æ–≤–∞—Ä–æ–≤

        # 1) –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –≤ <div.tc-tile__title a>
        title_tag = item.select_one("div.tc-tile__title a")
        if not title_tag:
            continue
        name_en = title_tag.get_text(strip=True)
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name_ru = await translate_text(name_en, dest="ru")
        rel_link = title_tag.get("href", "").strip()
        full_link = BASE_URL + rel_link

        # 2) –¶–µ–Ω–∞ –≤ <div class="product_price__value">
        price_tag = item.select_one(".product_price__value")
        price_text = price_tag.get_text(strip=True) if price_tag else "‚Äî"

        # 3) –û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ <p class="text-[14px] ...">
        desc_container = item.select_one("div.tc-tile__description")
        if desc_container:
            description_p = desc_container.find("p", class_="text-[14px]")
            if description_p:
                description_en = description_p.get_text(separator=" ", strip=True)
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
                description_ru = await translate_text(description_en, dest="ru")
            else:
                description_ru = ""
        else:
            description_ru = ""

        # 4) –ù–æ—Ç—ã –≤–∫—É—Å–∞ (<span class="descriptor-badge">)
        notes_list = []
        if desc_container and description_p:
            for span in description_p.find_all("span", class_="descriptor-badge"):
                notes_list.append(span.get_text(strip=True))
        notes_text = ", ".join(notes_list) if notes_list else "‚Äî"

        results.append(
            f"‚òï <b>{name_ru}</b>\n"  # –ù–∞–∑–≤–∞–Ω–∏–µ (—É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            f"üí∞ {price_text}\n"      # –¶–µ–Ω–∞
            f"üîó <a href=\"{full_link}\">–°—Å—ã–ª–∫–∞</a>\n\n"  # –°—Å—ã–ª–∫–∞
            f"‚ÑπÔ∏è <i>{description_ru}</i>\n\n"  # –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            f"–ù–æ—Ç—ã –≤–∫—É—Å–∞: {notes_text}"       # –ù–æ—Ç—ã –≤–∫—É—Å–∞
        )

    if not results:
        return ["‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."]
    return results

async def get_coffee_list() -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 10 –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_COFFEE_LIST_URL, timeout=10) as resp:
                resp.raise_for_status()
                data = await resp.json()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ—Ñ–µ: {e}"

    result_lines = ["–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ä—Ç–∞ –∫–æ—Ñ–µ –∏–∑ API:"]
    for item in data[:10]:
        title_en = item.get("title", "‚Äî")
        try:
            title_ru = await translate_text(title_en, dest="ru")
        except Exception:
            title_ru = title_en
        result_lines.append(f"‚Ä¢ {title_ru}")
    
    return "\n".join(result_lines)

async def get_coffee_random() -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ—Ä—ë—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
    """
    import random

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_COFFEE_LIST_URL, timeout=10) as resp:
                resp.raise_for_status()
                data = await resp.json()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ: {e}"

    if not isinstance(data, list) or not data:
        return "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Ç API –ø—Ä–∏—à–ª–∏ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."

    item = random.choice(data)
    title_en = item.get("title", "‚Äî")
    description_en = item.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    try:
        title_ru = await translate_text(title_en, dest="ru")
        description_ru = await translate_text(description_en, dest="ru")
    except Exception:
        title_ru = title_en
        description_ru = description_en

    return (
        f"üé≤ <b>–°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ</b>:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title_ru}</b>\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{description_ru}"
    )

# === –°–û–ó–î–ê–Å–ú –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–† ===
bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start: –ª–æ–≥–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º MAIN_KEYBOARD.
    """
    log_message(message)
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ –∫–æ—Ñ–µ ‚òï\n\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/latest_coffee ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ —Å tastycoffee.ru (—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º)\n"
        "/coffee_random ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ –∏–∑ API (—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º)\n"
        "/coffee_list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ –∏–∑ API (—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º)\n"
        "/brewing_tips ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ñ–µ\n"
        "/about_coffee ‚Äî –∫—Ä–∞—Ç–∫–æ –æ –∫–æ—Ñ–µ"
    )
    await message.answer(welcome_text, reply_markup=MAIN_KEYBOARD)

@dp.message(Command("latest_coffee"))
async def cmd_latest_coffee(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /latest_coffee: –ø–∞—Ä—Å–∏–º –∏ —à–ª—ë–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã).
    """
    log_message(message)
    await send_and_log(message, "üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ‚Ä¶")
    products = await parse_coffee_page()
    await send_and_log(message, products)

@dp.message(Command("coffee_random"))
async def cmd_coffee_random(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /coffee_random: —à–ª—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ –∏–∑ API (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω).
    """
    log_message(message)
    await send_and_log(message, "üçÄ –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ –≤ API‚Ä¶")
    random_info = await get_coffee_random()
    await send_and_log(message, random_info)

@dp.message(Command("coffee_list"))
async def cmd_coffee_list(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /coffee_list: —à–ª—ë–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö 10 —Å–æ—Ä—Ç–æ–≤ –∏–∑ API (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ).
    """
    log_message(message)
    await send_and_log(message, "üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ‚Ä¶")
    coffee_list_text = await get_coffee_list()
    await send_and_log(message, coffee_list_text)

@dp.message(Command("brewing_tips"))
async def cmd_brewing_tips(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /brewing_tips: —à–ª—ë–º —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ñ–µ.
    """
    log_message(message)
    tips_text = "\n".join(BREWING_TIPS)
    await send_and_log(message, tips_text)

@dp.message(Command("about_coffee"))
async def cmd_about_coffee(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /about_coffee: —à–ª—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ñ–µ.
    """
    log_message(message)
    await send_and_log(message, ABOUT_COFFEE_TEXT)

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
if __name__ == "__main__":
    print("‚òï –ö–æ—Ñ–µ–π–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    asyncio.run(dp.start_polling(bot))
