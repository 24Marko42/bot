import asyncio
from datetime import datetime
from pathlib import Path
from typing import List, Union, Optional

import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode

from conf import coffee_bot_token  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–¥–µ—Å—å –ª–µ–∂–∏—Ç —Ç–æ–∫–µ–Ω

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
API_TOKEN: str = coffee_bot_token
LOG_DIR: Path = Path("coffee_logs")
LOG_DIR.mkdir(exist_ok=True)

TASTY_URL: str = "https://shop.tastycoffee.ru/coffee?page=2"
API_COFFEE_LIST_URL: str = "https://api.sampleapis.com/coffee/hot"
BASE_URL: str = "https://shop.tastycoffee.ru"  # –¥–ª—è —Å–±–æ—Ä–∫–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (ReplyKeyboard)
MAIN_KEYBOARD: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="/latest_coffee"),
            KeyboardButton(text="/coffee_random"),
            KeyboardButton(text="/coffee_list"),
        ],
        [
            KeyboardButton(text="/brewing_tips"),
            KeyboardButton(text="/about_coffee"),
        ],
    ],
    resize_keyboard=True
)

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ñ–µ
BREWING_TIPS: List[str] = [
    "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–µ–º–æ–ª–æ—Ç—ã–π –∫–æ—Ñ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∫—É—Å–∞.",
    "2. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã ‚Äî 92‚Äë96¬∞C.",
    "3. –ù–µ –∑–∞–ª–∏–≤–∞–π—Ç–µ –∫–æ—Ñ–µ –∫–∏–ø—è—Ç–∫–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ—Ä–µ—á–∏.",
    "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–ø–æ—Ä—Ü–∏—é: –æ–∫–æ–ª–æ 60‚ÄØ–≥ –∫–æ—Ñ–µ –Ω–∞ –ª–∏—Ç—Ä –≤–æ–¥—ã.",
    "5. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–º–æ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.",
]

# –°—Ç–∞—Ç–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ—Ñ–µ
ABOUT_COFFEE_TEXT: str = (
    "–ö–æ—Ñ–µ‚ÄØ‚Äî —ç—Ç–æ –Ω–∞–ø–∏—Ç–æ–∫, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∏–∑ –æ–±–∂–∞—Ä–µ–Ω–Ω—ã—Ö –∑—ë—Ä–µ–Ω –∫–æ—Ñ–µ–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.\n"
    "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ—Ä—Ç–æ–≤ –∏ —Å–ø–æ—Å–æ–±–æ–≤ –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. –ö–æ—Ñ–µ –ø–æ–≤—ã—à–∞–µ—Ç –±–æ–¥—Ä–æ—Å—Ç—å, "
    "—É–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –º–∏—Ä–µ."
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log_message(message: Message) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª coffee_logs/user_<id>.log."""
    user = message.from_user
    log_file = LOG_DIR / f"user_{user.id}.log"
    text = message.text or ""
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(
            f"{datetime.now().isoformat()} | "
            f"User {user.id} ({user.full_name} | @{user.username}) | "
            f"Message: {text}\n"
        )


async def send_and_log(message: Message, content: Union[str, List[str]]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç (–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö.
    –ï—Å–ª–∏ content ‚Äî —Å–ø–∏—Å–æ–∫, —à–ª—ë—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    user = message.from_user
    log_file = LOG_DIR / f"user_{user.id}.log"

    def _write_log(entry: str) -> None:
        with open(log_file, "a", encoding="utf-8") as f_log:
            f_log.write(f"{datetime.now().isoformat()} | Bot sent: {entry}\n")

    if isinstance(content, list):
        for text in content:
            await message.answer(text, parse_mode=ParseMode.HTML)
            _write_log(text)
    else:
        await message.answer(content, parse_mode=ParseMode.HTML)
        _write_log(content)


# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP‚Äë—Ñ—É–Ω–∫—Ü–∏–∏ ===
async def fetch_html(session: aiohttp.ClientSession, url: str) -> Optional[str]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    –í —Å–ª—É—á–∞–µ –Ω–µ—É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    try:
        async with session.get(url, timeout=10) as resp:
            if resp.status == 200:
                return await resp.text()
            else:
                return None
    except asyncio.TimeoutError:
        return None
    except aiohttp.ClientError:
        return None


async def parse_coffee_page(url: str = TASTY_URL, limit: int = 5) -> List[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É tastycoffee.ru/coffee?page=2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Å–ø–∏—Å–æ–∫ HTML-—Å—Ç—Ä–æ–∫ —Å –ø–µ—Ä–≤—ã–º–∏ `limit` —Å–æ—Ä—Ç–∞–º–∏ –∫–æ—Ñ–µ. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è:
      - –Ω–∞–∑–≤–∞–Ω–∏–µ
      - —Å—Å—ã–ª–∫–∞
      - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è (<p class="text-[14px] ...">‚Ä¶</p>)
      - —Å–ø–∏—Å–æ–∫ ¬´–Ω–æ—Ç –≤–∫—É—Å–∞¬ª (<span class="descriptor-badge">‚Ä¶</span>)
    """
    async with aiohttp.ClientSession() as session:
        html = await fetch_html(session, url)
        if not html:
            return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ tastycoffee.ru"]

    soup = BeautifulSoup(html, "html.parser")
    # –ò—â–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
    items = soup.select("div.product-item")
    results: List[str] = []

    for idx, item in enumerate(items):
        if idx >= limit:
            break

        # 1) –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        title_tag = item.select_one("div.tc-tile__title a")
        if not title_tag:
            continue

        name = title_tag.get_text(strip=True)
        rel_link = title_tag.get("href", "").strip()
        full_link = BASE_URL + rel_link

        # 2) –ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è (–≥–¥–µ –ª–µ–∂–∏—Ç <p class="text-[14px] ...">)
        desc_container = item.select_one("div.tc-tile__description")
        if desc_container:
            # 2.1) —Å–∞–º —Ç–µ–≥ <p>
            description_p = desc_container.find("p", class_="text-[14px]")
            if description_p:
                description = description_p.get_text(separator=" ", strip=True)
                # 2.2) –Ω–æ—Ç—ã –≤–∫—É—Å–∞ ‚Äî –≤—Å–µ <span class="descriptor-badge">
                flavor_notes = [
                    span.get_text(strip=True)
                    for span in description_p.find_all("span", class_="descriptor-badge")
                ]
            else:
                description = ""
                flavor_notes = []
        else:
            description = ""
            flavor_notes = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–Ω—É HTML-—Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        notes_text = ", ".join(flavor_notes) if flavor_notes else "‚Äî"
        result_str = (
            f"‚òï <b>{name}</b>\n"
            f"üîó <a href=\"{full_link}\">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n\n"
            f"‚ÑπÔ∏è <i>{description}</i>\n\n"
            f"–ù–æ—Ç—ã –≤–∫—É—Å–∞: {notes_text}"
        )
        results.append(result_str)

    if not results:
        return ["‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."]
    return results


async def get_coffee_list() -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 10 –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ –∏–∑ sampleapis.com/coffee/hot.
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_COFFEE_LIST_URL, timeout=10) as resp:
                resp.raise_for_status()
                data = await resp.json()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ—Ñ–µ: {e}"

    titles = [item.get("title", "‚Äî") for item in data[:10]]
    bullet_list = "\n".join(f"‚Ä¢ {t}" for t in titles)
    return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ä—Ç–∞ –∫–æ—Ñ–µ –∏–∑ API:\n" + bullet_list


async def get_coffee_random() -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ—Ä—ë—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ñ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    import random

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_COFFEE_LIST_URL, timeout=10) as resp:
                resp.raise_for_status()
                data = await resp.json()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ: {e}"

    if not isinstance(data, list) or not data:
        return "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Ç API –ø—Ä–∏—à–ª–∏ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."

    item = random.choice(data)
    title = item.get("title", "‚Äî")
    description = item.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    return (
        f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
    )


# === –°–æ–∑–¥–∞—ë–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===

@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    log_message(message)
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ –∫–æ—Ñ–µ ‚òï\n\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/latest_coffee ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ —Å tastycoffee.ru\n"
        "/coffee_random ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ –∏–∑ API\n"
        "/coffee_list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ –∏–∑ API\n"
        "/brewing_tips ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ñ–µ\n"
        "/about_coffee ‚Äî –∫—Ä–∞—Ç–∫–æ –æ –∫–æ—Ñ–µ"
    )
    await send_and_log(message, welcome_text)


@dp.message(Command("latest_coffee"))
async def cmd_latest_coffee(message: Message) -> None:
    log_message(message)
    await send_and_log(message, "üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ‚Ä¶")
    parsed = await parse_coffee_page()
    await send_and_log(message, parsed)


@dp.message(Command("coffee_random"))
async def cmd_coffee_random(message: Message) -> None:
    log_message(message)
    await send_and_log(message, "üçÄ –ò—â—É —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ –≤ API‚Ä¶")
    random_info = await get_coffee_random()
    await send_and_log(message, random_info)


@dp.message(Command("coffee_list"))
async def cmd_coffee_list(message: Message) -> None:
    log_message(message)
    await send_and_log(message, "üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –∫–æ—Ñ–µ‚Ä¶")
    coffee_list_text = await get_coffee_list()
    await send_and_log(message, coffee_list_text)


@dp.message(Command("brewing_tips"))
async def cmd_brewing_tips(message: Message) -> None:
    log_message(message)
    tips_text = "\n".join(BREWING_TIPS)
    await send_and_log(message, tips_text)


@dp.message(Command("about_coffee"))
async def cmd_about_coffee(message: Message) -> None:
    log_message(message)
    await send_and_log(message, ABOUT_COFFEE_TEXT)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    print("‚òï –ö–æ—Ñ–µ–π–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ /start,
    # –º–æ–∂–Ω–æ –≤ cmd_start –¥–æ–±–∞–≤–∏—Ç—å: await message.answer("...", reply_markup=MAIN_KEYBOARD)
    asyncio.run(dp.start_polling(bot))
