import logging
from datetime import datetime
from pathlib import Path

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton

from bs4 import BeautifulSoup
from conf import token_tg

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π) ===
API_TOKEN = token_tg

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===

# –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

def log_message(message: Message):
    user = message.from_user
    log_file = log_dir / f"user_{user.id}.log"
    with open(log_file, "a", encoding="utf-8") as f:
        log_entry = (f"{datetime.now().isoformat()} | "
                     f"User {user.id} ({user.full_name} | @{user.username}) | "
                     f"Message: {message.text}\n")
        f.write(log_entry)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –°–∫—Ä–∏–ø—Ç —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å darkreading.com ===
def scrape_securitylab_news():
    url = "https://www.securitylab.ru/"
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/114.0.0.0 Safari/537.36"
        ),
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Referer": "https://www.google.com/"
    }

    try:
        session = requests.Session()
        response = session.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        articles = soup.select("div.article-card")[:5]

        news_items = []
        base_url = "https://www.securitylab.ru"

        for article in articles:
            title_tag = article.select_one("h4.article-card-title") or article.select_one("h2.article-card-title")
            if not title_tag:
                continue
            title = title_tag.get_text(strip=True)

            link_tag = title_tag.find_parent("a")
            if not link_tag:
                continue
            href = link_tag.get("href")
            full_link = href if href.startswith("http") else base_url + href

            desc_tag = article.select_one("p")
            description = desc_tag.get_text(strip=True) if desc_tag else ""

            time_tag = article.select_one("time")
            date_str = time_tag.get_text(strip=True) if time_tag else ""

            item_text = f"‚Ä¢ {title}\n{full_link}"
            if description:
                item_text += f"\n{description}"
            if date_str:
                item_text += f"\nüïí {date_str}"

            news_items.append(item_text)

        if not news_items:
            return "–ù–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        return "\n\n".join(news_items)

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"


# === API –¥–ª—è CVSS ===
import requests

def get_cvss_score(cvss_vector: str):
    """
    –ó–∞–ø—Ä–æ—Å –∫ API FIRST.org –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ CVSS –ø–æ –≤–µ–∫—Ç–æ—Ä—É.

    cvss_vector ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CVSS v3, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ –æ—à–∏–±–∫—É.
    """
    url = "https://api.first.org/data/cvss/v3"
    params = {
        "vector": cvss_vector
    }
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept": "application/json"
    }
    try:
        r = requests.get(url, params=params, headers=headers, timeout=10)
        r.raise_for_status()
        data = r.json()
        if "data" in data:
            scored = data["data"]
            # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            base_score = scored.get("baseScore", "N/A")
            severity = scored.get("baseSeverity", "N/A")
            vector = scored.get("vectorString", "")
            return f"CVSS v3 Score: {base_score} ({severity})\n–í–µ–∫—Ç–æ—Ä: {vector}"
        else:
            return "–î–∞–Ω–Ω—ã–µ CVSS –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ CVSS API: {e}"



# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
async def send_and_log(message: Message, text: str):
    await message.answer(text)
    user = message.from_user
    log_file = log_dir / f"user_{user.id}.log"
    with open(log_file, "a", encoding="utf-8") as f:
        log_entry = f"{datetime.now().isoformat()} | Bot sent: {text}\n"
        f.write(log_entry)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    log_message(message)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/latest_news"), KeyboardButton(text="/cvss_score")],
            [KeyboardButton(text="/tips")],
        ],
        resize_keyboard=True
    )
    await send_and_log(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
        "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/latest_news ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏–Ω—Ñ–æ–±–µ–∑—É\n"
        "/cvss_score ‚Äî –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ CVSS\n"
        "/tips ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö\n"
    )

@dp.message(Command("latest_news"))
async def cmd_latest_news(message: Message):
    log_message(message)
    await send_and_log(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    news = scrape_securitylab_news()
    await send_and_log(message, news)

@dp.message(Command("cvss_score"))
async def cmd_cvss_score(message: Message):
    log_message(message)
    await send_and_log(message, "–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CVSS...")
    info = get_cvss_score()
    await send_and_log(message, info)

@dp.message(Command("tips"))
async def cmd_tips(message: Message):
    log_message(message)
    tips_list = [
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.",
        "2. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–æ—Ñ—Ç –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.",
        "3. –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –≤–ª–æ–∂–µ–Ω–∏—è.",
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –∏ —Ñ–∞–π—Ä–≤–æ–ª–ª.",
        "5. –®–∏—Ñ—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏.",
    ]
    await send_and_log(message, "\n".join(tips_list))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(dp.start_polling(bot))
