# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
from aiogram import Bot, Dispatcher, types  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã aiogram
from aiogram.enums import ParseMode          # –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.filters.command import Command  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
from aiogram.fsm.state import State, StatesGroup  # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
from aiogram.fsm.context import FSMContext         # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FSM
from aiogram.types import Message                 # –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è Telegram

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from conf import coffee_bot_token, admin_id
from keyboards import MAIN_KEYBOARD, BREWING_TIPS
from log_utils import log_message, send_and_log
from parsers import (                          # –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Å–∞–π—Ç–∞
    parse_coffee_page,
    get_coffee_list,
    get_coffee_random,
    get_all_flavor_notes,
    find_coffee_by_flavors,
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
API_TOKEN: str = coffee_bot_token
ADMIN_ID: int = admin_id

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è FSM (Finite State Machine)
from aiogram.fsm.storage.memory import MemoryStorage
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM ‚Äî —Ä–µ–∂–∏–º "–ü—Ä–µ–¥–ª–æ–∂–∫–∞"
class Suggestion(StatesGroup):
    waiting_for_suggestion = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ—Ñ–µ –ø–æ –≤–∫—É—Å–∞–º
class FlavorSearch(StatesGroup):
    waiting_for_flavors = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    log_message(message)  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ –∫–æ—Ñ–µ ‚òï\n–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    await message.answer(text, reply_markup=MAIN_KEYBOARD)  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø–æ–∫–∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∫–∞"
@dp.message(lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∫–∞")
async def ask_suggestion(message: Message, state: FSMContext):
    log_message(message)
    text = "üì© –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏–µ."
    await message.answer(text)  # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await state.set_state(Suggestion.waiting_for_suggestion)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Suggestion.waiting_for_suggestion)
async def process_suggestion(message: Message, state: FSMContext):
    log_message(message)
    user = message.from_user
    forwarded_text = (
        f"üì® –ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n"
        f"{message.text}"
    )
    await bot.send_message(ADMIN_ID, forwarded_text)  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ä—Ç–∞"
@dp.message(lambda m: m.text == "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ä—Ç–∞")
async def latest_coffee(message: Message):
    log_message(message)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_and_log(message, await parse_coffee_page("https://shop.tastycoffee.ru/coffee?page=1"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ"
@dp.message(lambda m: m.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ñ–µ")
async def random_coffee(message: Message):
    log_message(message)
    await send_and_log(message, await get_coffee_random())  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ñ–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤"
@dp.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤")
async def coffee_list(message: Message):
    log_message(message)
    await send_and_log(message, await get_coffee_list())  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚òï –°–æ–≤–µ—Ç—ã"
@dp.message(lambda m: m.text == "‚òï –°–æ–≤–µ—Ç—ã")
async def brewing_tips(message: Message):
    log_message(message)
    await send_and_log(message, "\n".join(BREWING_TIPS))  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–≤–µ—Ç–æ–≤

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üß™ –ü–æ–¥–±–æ—Ä –ø–æ –≤–∫—É—Å–∞–º"
@dp.message(lambda m: m.text == "üß™ –ü–æ–¥–±–æ—Ä –ø–æ –≤–∫—É—Å–∞–º")
async def select_flavors(message: Message, state: FSMContext):
    log_message(message)
    notes = await get_all_flavor_notes()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã
    if not notes:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ üòî")
        return
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é + —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n" + ", ".join(notes) +
        "\n\n‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ¬´–ü–æ–¥–±–æ—Ä –ø–æ –≤–∫—É—Å–∞–º¬ª, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–≤–æ–¥–∏—Ç—å –Ω–æ—Ç–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ:\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∫—Ä–∞—Å–Ω–æ–≥–æ —è–±–ª–æ–∫–∞¬ª, ¬´–º–æ–ª–æ—á–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞¬ª, ¬´–æ—Ä–µ—Ö–æ–≤–æ–π –ø–∞—Å—Ç—ã¬ª –∏ —Ç. –ø.\n"
        "(–¢–∞–∫ –±–æ—Ç –ª—É—á—à–µ –Ω–∞–π–¥—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.)"
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∫—É—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")  # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤–∫—É—Å—ã
    await state.set_state(FlavorSearch.waiting_for_flavors)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–∫—É—Å–æ–≤

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∫—É—Å–æ–≤
@dp.message(FlavorSearch.waiting_for_flavors)
async def process_flavors(message: Message, state: FSMContext):
    log_message(message)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞: —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ
    flavors = [f.strip().lower() for f in message.text.split(",") if f.strip()]
    if not flavors:
        await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –≤–∫—É—Å—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    # –ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ñ–µ –ø–æ –≤–∫—É—Å–∞–º
    await send_and_log(message, await find_coffee_by_flavors(flavors))
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
